"""Initial revision

Revision ID: 1ece9856443c
Revises: 
Create Date: 2025-05-27 19:44:55.253395

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1ece9856443c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('offer_qualities',
    sa.Column('QualityId', sa.UUID(), nullable=False),
    sa.Column('QualityName', sa.VARCHAR(length=11), nullable=False),
    sa.PrimaryKeyConstraint('QualityId')
    )
    op.create_table('offer_tag_groups',
    sa.Column('TagGroupId', sa.UUID(), nullable=False),
    sa.Column('TagGroupName', sa.Enum('Accessories', 'Armor', 'Artifact', 'City Resources', 'Consumable', 'Farmable', 'Furniture', 'Gathering Gear', 'Laborers', 'Luxury Goods', 'Magic', 'Materials', 'Melee', 'Mount', 'Off-Hand', 'Other', 'Product', 'Ranged', 'Resource', 'Tomes', 'Token', 'Tool', 'Trophies', name='offertaggroupenum'), nullable=False),
    sa.PrimaryKeyConstraint('TagGroupId')
    )
    op.create_table('offer_tiers',
    sa.Column('TierId', sa.UUID(), nullable=False),
    sa.Column('TierName', sa.VARCHAR(length=5), nullable=False),
    sa.Column('TierLevels', sa.ARRAY(sa.INTEGER()), nullable=True),
    sa.PrimaryKeyConstraint('TierId')
    )
    op.create_table('payment_statuses',
    sa.Column('PaymentStatusId', sa.INTEGER(), nullable=False),
    sa.Column('PaymentStatusName', sa.VARCHAR(length=45), nullable=True),
    sa.PrimaryKeyConstraint('PaymentStatusId')
    )
    op.create_table('roles',
    sa.Column('RoleId', sa.UUID(), nullable=False),
    sa.Column('RoleName', sa.VARCHAR(length=50), nullable=False),
    sa.Column('RoleLevel', sa.INTEGER(), nullable=False),
    sa.PrimaryKeyConstraint('RoleId')
    )
    op.create_table('subscription_types',
    sa.Column('SubscriptionTypeId', sa.INTEGER(), nullable=False),
    sa.Column('Name', sa.VARCHAR(length=45), nullable=False),
    sa.PrimaryKeyConstraint('SubscriptionTypeId')
    )
    op.create_table('offer_tags',
    sa.Column('TagId', sa.UUID(), nullable=False),
    sa.Column('TagName', sa.Enum('Bag', 'Cape', 'Cloth Armor', 'Leather Armor', 'Plate Armor', 'Unique Armor', 'Armor Artifact', 'Magic Artifact', 'Melee Artifact', 'Beastheart', 'Shadowheart', 'Mountainheart', 'Rockheart', 'Treeheart', 'Vineheart', 'Consumable-Cooked', 'Fish', 'Fishing Bait', 'Victory Emotes', 'Consumable-Map', 'Consumable-Other', 'Potion', 'Vanity', 'Farable-Animal', 'Seed', 'Banner', 'Bed', 'Chest', 'Decoration', 'Flag', 'Heretic', 'Keeper', 'Morgana', 'Repair Kit', 'Table', 'Unique', 'Harvester', 'Gathering-Fisherman', 'Skinner', 'Miner', 'Quarrier', 'Gathering-Lumberjack', 'Cropper', 'Laborers-Fisherman', 'Gamekeeper', 'Fletcher', 'Imbuer', 'Mercenary', 'Prospector', 'Stonecutter', 'Tinker', 'Blacksmith', 'Laborers-Lumberjack', 'Any', 'Bridgewatch', 'Caerleon', 'Fort Sterling', 'Lymhurst', 'Martlock', 'Thetford', 'Arcane Staff', 'Crused Staff', 'Fire Staff', 'Frost Staff', 'Holy Staff', 'Nature Staff', 'Shapeshifter Staff', 'Essence', 'Materials-Other', 'Relic', 'Rune', 'Avalonian Shards', 'Crystal Shards', 'Soul', 'Axe', 'Dagger', 'Hammer', 'War Gloves', 'Mace', 'Quarterstaff', 'Spear', 'Sword', 'Armored Horse', 'Battle Mount', 'Swiftclaw', 'Direbear', 'Direboar', 'Direwolf', 'Stag or Moose', 'Mule', 'Ox', 'Rare Mount', 'Riding Horse', 'Swamp Dragon', 'Book', 'Horn', 'Orb', 'Shield', 'Torch', 'Totem', 'Hideout Construction Kit', 'Product-Animal', 'Product-Cooked', 'Farming', 'Journals', 'Bow', 'Crossbow', 'Cloth', 'Fiber', 'Hide', 'Leather', 'Metal Bar', 'Ore', 'Resource-Other', 'Planks', 'Stone', 'Stone Block', 'Wood', 'Tome of Insight', 'Fiber Harvester Tomes', 'Tomes-Animal Skinner Tomes', 'Ore Miner Tomes', 'Quarrier Tomes', 'Lumberjack Tomes', 'Arena Sigil', 'Crystal League Token', 'Event', 'Token-Map', 'Token-Other', 'Royal Sigil', 'Siege Hammer', 'Fishing Rod', 'Pickaxe', 'Sickle', 'Siege Banner', 'Skinning Knife', 'Stone Hammer', 'Tracking Toolkit', 'Wood Axe', 'Fiber Trophy', 'Fishing Trophy', 'General Trophy', 'Hide Trophy', 'Mercenary Trophy', 'Ore Trophy', 'Stone Trophy', 'Wood Trophy', name='offertagnamesenum'), nullable=False),
    sa.Column('TagGroup', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['TagGroup'], ['offer_tag_groups.TagGroupId'], ),
    sa.PrimaryKeyConstraint('TagId')
    )
    op.create_table('subscriptions',
    sa.Column('SubscriptionId', sa.UUID(), nullable=False),
    sa.Column('SubscriptionTypeId', sa.INTEGER(), nullable=False),
    sa.Column('Name', sa.VARCHAR(length=45), nullable=True),
    sa.Column('DateUntil', sa.DATE(), nullable=False),
    sa.Column('DateFrom', sa.DATE(), nullable=False),
    sa.ForeignKeyConstraint(['SubscriptionTypeId'], ['subscription_types.SubscriptionTypeId'], ),
    sa.PrimaryKeyConstraint('SubscriptionId')
    )
    op.create_table('users',
    sa.Column('UserId', sa.UUID(), nullable=False),
    sa.Column('PhoneNumber', sa.VARCHAR(length=11), nullable=True),
    sa.Column('TelegramId', sa.BIGINT(), nullable=False),
    sa.Column('IsVip', sa.BOOLEAN(), nullable=False),
    sa.Column('RoleId', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['RoleId'], ['roles.RoleId'], ),
    sa.PrimaryKeyConstraint('UserId')
    )
    op.create_table('messages',
    sa.Column('MessageId', sa.UUID(), nullable=False),
    sa.Column('SenderId', sa.UUID(), nullable=False),
    sa.Column('ReceiverId', sa.UUID(), nullable=False),
    sa.Column('MessageText', sa.TEXT(), nullable=False),
    sa.ForeignKeyConstraint(['ReceiverId'], ['users.UserId'], ),
    sa.ForeignKeyConstraint(['SenderId'], ['users.UserId'], ),
    sa.PrimaryKeyConstraint('MessageId')
    )
    op.create_table('offers',
    sa.Column('OfferId', sa.UUID(), nullable=False),
    sa.Column('Label', sa.VARCHAR(length=60), nullable=True),
    sa.Column('Description', sa.VARCHAR(length=400), nullable=True),
    sa.Column('PhotoPath', sa.VARCHAR(length=200), nullable=True),
    sa.Column('PublishDate', sa.DATE(), nullable=True),
    sa.Column('ExpireDate', sa.DATE(), nullable=True),
    sa.Column('HighPriority', sa.BOOLEAN(), nullable=False),
    sa.Column('OwnerId', sa.UUID(), nullable=False),
    sa.Column('Active', sa.BOOLEAN(), nullable=False),
    sa.ForeignKeyConstraint(['OwnerId'], ['users.UserId'], ),
    sa.PrimaryKeyConstraint('OfferId')
    )
    op.create_table('subscription_statuses',
    sa.Column('UserId', sa.UUID(), nullable=False),
    sa.Column('PaymentStatusId', sa.INTEGER(), nullable=False),
    sa.Column('SubscriptionId', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['PaymentStatusId'], ['payment_statuses.PaymentStatusId'], ),
    sa.ForeignKeyConstraint(['SubscriptionId'], ['subscriptions.SubscriptionId'], ),
    sa.ForeignKeyConstraint(['UserId'], ['users.UserId'], ),
    sa.PrimaryKeyConstraint('UserId')
    )
    op.create_table('subscriptions_history',
    sa.Column('UserId', sa.UUID(), nullable=False),
    sa.Column('SubscriptionId', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['SubscriptionId'], ['subscriptions.SubscriptionId'], ),
    sa.ForeignKeyConstraint(['UserId'], ['users.UserId'], ),
    sa.PrimaryKeyConstraint('UserId')
    )
    op.create_table('offers_qualities',
    sa.Column('OfferId', sa.UUID(), nullable=False),
    sa.Column('QualityId', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['OfferId'], ['offers.OfferId'], ),
    sa.ForeignKeyConstraint(['QualityId'], ['offer_qualities.QualityId'], ),
    sa.PrimaryKeyConstraint('OfferId')
    )
    op.create_table('offers_tags',
    sa.Column('OfferId', sa.UUID(), nullable=False),
    sa.Column('TagId', sa.UUID(), nullable=True),
    sa.Column('GroupId', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['GroupId'], ['offer_tag_groups.TagGroupId'], ),
    sa.ForeignKeyConstraint(['OfferId'], ['offers.OfferId'], ),
    sa.ForeignKeyConstraint(['TagId'], ['offer_tags.TagId'], ),
    sa.PrimaryKeyConstraint('OfferId')
    )
    op.create_table('offers_tiers',
    sa.Column('OfferId', sa.UUID(), nullable=False),
    sa.Column('TierId', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['OfferId'], ['offers.OfferId'], ),
    sa.ForeignKeyConstraint(['TierId'], ['offer_tiers.TierId'], ),
    sa.PrimaryKeyConstraint('OfferId', 'TierId')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('offers_tiers')
    op.drop_table('offers_tags')
    op.drop_table('offers_qualities')
    op.drop_table('subscriptions_history')
    op.drop_table('subscription_statuses')
    op.drop_table('offers')
    op.drop_table('messages')
    op.drop_table('users')
    op.drop_table('subscriptions')
    op.drop_table('offer_tags')
    op.drop_table('subscription_types')
    op.drop_table('roles')
    op.drop_table('payment_statuses')
    op.drop_table('offer_tiers')
    op.drop_table('offer_tag_groups')
    op.drop_table('offer_qualities')
    # ### end Alembic commands ###
